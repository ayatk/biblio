/*
 * Copyright (c) 2016-2018 ayatk.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.cookpad.android.licensetools'
apply plugin: 'io.fabric'

// Keys
def RELEASE_STORE_PASSWORD = (System.getenv("RELEASE_STORE_PASSWORD") != null) ?
    System.getenv("RELEASE_STORE_PASSWORD") : ""
def RELEASE_KEY_ALIAS = (System.getenv("RELEASE_KEY_ALIAS") != null) ?
    System.getenv("RELEASE_KEY_ALIAS") : ""
def RELEASE_KEY_PASSWORD = (System.getenv("RELEASE_KEY_PASSWORD") != null) ?
    System.getenv("RELEASE_KEY_PASSWORD") : ""
def FABRIC_API_KEY = (System.getenv("FABRIC_API_KEY") != null) ?
    System.getenv("FABRIC_API_KEY") : ""

def secretPropsFile = file("$rootDir/secret.properties")
if (secretPropsFile.canRead()) {
  Properties secretProps = new Properties()
  secretProps.load(new FileInputStream(secretPropsFile))
  RELEASE_STORE_PASSWORD = secretProps['RELEASE_STORE_PASSWORD']
  RELEASE_KEY_ALIAS = secretProps['RELEASE_KEY_ALIAS']
  RELEASE_KEY_PASSWORD = secretProps['RELEASE_KEY_PASSWORD']
  FABRIC_API_KEY = secretProps['FABRIC_API_KEY']
}

android {
  compileSdkVersion versions.compileSdk
  buildToolsVersion versions.buildTools

  defaultConfig {
    applicationId PACKAGE_NAME
    minSdkVersion versions.minSdk
    targetSdkVersion versions.targetSdk
    versionCode BUILD_NUM.toInteger()
    versionName VERSION
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    vectorDrawables.useSupportLibrary true
    multiDexEnabled true

    buildConfigField "String", "GIT_SHA", "\"${GIT_SHA}\""
    buildConfigField "String", "GIT_BRANCH", "\"${GIT_BRANCH}\""
    buildConfigField "String", "BUILD_NUM", "\"${BUILD_NUM}\""
    buildConfigField "String", "BUILD_TIME", "\"${BUILD_TIME}\""
    manifestPlaceholders = [FABRIC_API_KEY: FABRIC_API_KEY]
  }

  signingConfigs {
    release {
      storeFile file("$rootDir/app.release.jks")
      storePassword RELEASE_STORE_PASSWORD
      keyAlias RELEASE_KEY_ALIAS
      keyPassword RELEASE_KEY_PASSWORD
    }
    debug {
      storeFile file("$rootDir/app.debug.jks")
      storePassword 'android'
      keyAlias 'debug'
      keyPassword 'android'
    }
  }

  buildTypes {
    applicationVariants.all { variant ->
      variant.outputs.all { output ->
        if (output.outputFile != null && output.outputFile.name.endsWith('.apk')) {
          outputFileName = "${APP_NAME}-v${VERSION}-${BUILD_NUM}.apk"
        }
      }
    }

    release {
      shrinkResources true
      debuggable false
      zipAlignEnabled true
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      signingConfig signingConfigs.release
    }

    debug {
      minifyEnabled false
      debuggable true
      zipAlignEnabled true
      applicationIdSuffix '.debug'
      versionNameSuffix "-debug"
      signingConfig signingConfigs.debug
    }
  }

  productFlavors {
    develop {}
    // use deploygate
    nightly {
      minSdkVersion versions.minSdk
      applicationId "${PACKAGE_NAME}.nightly"
      versionName "${VERSION}-nightly"
    }
    production {
      // The actual minSdkVersion for the application.
      minSdkVersion versions.minSdk
    }
  }

  variantFilter { variant ->
    def names = variant.flavors*.name

    def nightlyDebug = names.contains("nightly") && variant.buildType.name == "debug"
    def productionDebug = names.contains("production") && variant.buildType.name == "debug"
    // To check for a certain build type, use variant.buildType.name == "<buildType>"
    if (nightlyDebug || productionDebug) {
      // Gradle ignores any variants that satisfy the conditions above.
      setIgnore(true)
    }
  }

  flavorDimensions 'tier'

  sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
    debug.java.srcDirs += 'src/debug/kotlin'
    test.java.srcDirs += 'src/test/kotlin'
    androidTest.java.srcDirs += 'src/androidTest/kotlin'
  }

  packagingOptions {
    exclude 'META-INF/ASL2.0'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/NOTICE.txt'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/MANIFEST.MF'
  }

  dataBinding {
    enabled = true
  }

  kapt {
    // NonExistentClass Errorを無視
    correctErrorTypes = true
  }

  lintOptions {
    textReport true
    textOutput 'stdout'
    disable 'GoogleAppIndexingWarning', // ディープリンクは利用しないので、無効化
        'InvalidPackage', // InvalidPackageのエラーを除外
        'RestrictedApi',
        'BinaryOperationInTimber',
        // NOTE: α版gradle pluginを使ってるとTimberがお亡くなりになるので一時的にdisable
        'LogNotTimber',
        'StringFormatInTimber',
        'ThrowableNotAtBeginning',
        'TimberArgCount',
        'TimberArgTypes',
        'TimberExceptionLogging',
        'TimberTagLength'
  }

  testOptions {
    unitTests.all {
      // All the usual Gradle options.
      testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        outputs.upToDateWhen { false }
        showCauses true
        showExceptions true
        showStackTraces true
        showStandardStreams true
        exceptionFormat "full"
      }
    }
  }
}

configurations {
  ktlint
}

dependencies {

  // Kotlin
  implementation depends.kotlin.stdlib
  implementation depends.ktx

  // android support libraries
  implementation depends.support.appcompat
  implementation depends.support.design
  implementation depends.support.cardview
  implementation depends.support.customtabs
  implementation depends.support.preference
  implementation depends.support.preferenceV14
  implementation depends.support.constraint

  // Android Architecture Components
  implementation depends.lifecycle.runtime
  implementation depends.lifecycle.extensions
  implementation depends.lifecycle.reactivestreams
  implementation depends.room.runtime
  implementation depends.room.rxjava2
  kapt depends.lifecycle.compiler
  kapt depends.room.compiler

  // Network
  implementation depends.retrofit.core
  implementation depends.retrofit.converterGson
  implementation depends.retrofit.converterScalars
  implementation depends.retrofit.adapterRxJava2

  implementation depends.gson

  implementation depends.okhttp3.core
  implementation depends.okhttp3.loggingIntercepter

  // Dependency Injection
  implementation depends.dagger.core
  implementation depends.dagger.android
  implementation depends.dagger.androidSupport
  kapt depends.dagger.compiler
  kapt depends.dagger.androidProcessor

  // ReactiveX
  implementation depends.rxjava2.core
  implementation depends.rxjava2.android
  implementation depends.rxjava2.kotlin

  // SharedPreferences
  implementation depends.kvsSchema.core
  kapt depends.kvsSchema.compiler

  // Jsoup
  implementation depends.jsoup

  // UI
  implementation depends.flexbox
  implementation depends.groupie.core
  implementation depends.groupie.binding

  // Util
  implementation depends.eventbus

  // Debug
  implementation depends.timber

  debugImplementation depends.leakcanary

  debugImplementation depends.stetho.core
  debugImplementation depends.stetho.okhttp3
  debugImplementation depends.stetho.timber

  debugImplementation depends.debot.core
  releaseImplementation depends.debot.noop

  debugImplementation depends.takt

  implementation(depends.crashlytics) {
    transitive = true
  }


  // Test
  testImplementation depends.junit

  androidTestImplementation depends.supportTest.runner
  androidTestImplementation depends.supportTest.espresso
  androidTestImplementation depends.supportTest.contrib

  testImplementation depends.archTest.core
  testImplementation depends.archTest.room

  // Lint
  ktlint depends.ktlint
}

task ktlint(type: JavaExec, group: "verification") {
  description = "Check Kotlin code style."
  main = "com.github.shyiko.ktlint.Main"
  classpath = configurations.ktlint
  args "src/**/*.kt", "--reporter=plain", "--reporter=checkstyle,output=${project.buildDir}/reports/ktlint/ktlint.xml"
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
  description = "Fix Kotlin code style deviations."
  main = "com.github.shyiko.ktlint.Main"
  classpath = configurations.ktlint
  args "-F", "src/**/*.kt"
}

apply plugin: 'com.google.gms.google-services'
